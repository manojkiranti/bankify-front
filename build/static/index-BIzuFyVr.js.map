{"version":3,"file":"index-BIzuFyVr.js","sources":["../../src/pages/customerServices/routes/FixedDeposit.tsx","../../src/pages/customerServices/routes/DisputeClaim.tsx","../../src/pages/customerServices/routes/BlockAccount.tsx","../../src/pages/customerServices/routes/ChequeRequest.tsx","../../src/pages/customerServices/routes/ChequeStopRequest.tsx","../../src/pages/customerServices/routes/BalanceCertificate.tsx","../../src/pages/customerServices/routes/LockerRequest.tsx","../../src/pages/customerServices/routes/CustomerServiceRequest.tsx","../../src/pages/customerServices/routes/index.tsx"],"sourcesContent":["import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst FixedDeposit: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"FIXED_DEPOSIT\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default FixedDeposit;","import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst DisputeClaim: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"DISPUTE_CLAIM\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default DisputeClaim;","import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst BlockAccount: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"BLOCK_ACCOUNT\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default BlockAccount;","import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst ChequeRequest: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"CHEQUE_REQUEST\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default ChequeRequest;","import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst ChequeStopRequest: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"CHEQUE_STOP\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default ChequeStopRequest;","import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst BalanceCertificate: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"BALANCE_CERTIFICATE\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default BalanceCertificate;","import { useApproveRequestMutation, useFetchServiceListQuery } from \"@/store/apis/coreApi\";\nimport { displayError, displaySuccess } from \"@/utils/displayMessageUtils\";\nimport { Alert, Button, Spin, Table } from \"antd\";\nimport { ColumnsType } from 'antd/es/table';\n\ninterface ServiceRequest {\n  id: number; // Assuming each result has a unique 'id'\n  account_number: string;\n  status: string;\n  created_at: string;\n  // Add other fields based on your actual data structure\n}\n\n\n\nconst LockerRequest: React.FC = () => {\n  \n  const columns: ColumnsType<ServiceRequest> = [\n    // {\n    //   title: 'ID',\n    //   dataIndex: 'id',\n    //   key: 'id',\n  \n    // },\n    {\n      title: 'Account Number',\n      dataIndex: 'account_number',\n      key: 'account_number'\n    },\n    {\n      title: 'Account Name',\n      dataIndex:\"account_name\",\n      key: 'account_name'\n    },\n    {\n      title: 'Email',\n      dataIndex: \"email\",\n      key: 'email'\n    },\n    {\n      title: 'Mobile Number',\n      dataIndex:\"phone\",\n      key: 'phone'\n    },\n    {\n      title: 'Request channel',\n      dataIndex: [\"request_body\",\"channel\"],\n      key: 'channel'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Initiated', value: 'INITIATED' },\n        { text: 'Submitted', value: 'SUBMITTED' },\n        { text: 'Completed', value: 'COMPLETED' },\n      ],\n  \n    },\n    \n    {\n      title: 'Requested At',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      render: (date: string) => new Date(date).toLocaleDateString(),\n    },\n    {\n      title: 'Action',\n      dataIndex: '',\n      key: 'x',\n      render: (value) => {\n        if( value.status === 'SUBMITTED') {\n          return <Button type=\"primary\" onClick={() => handleServiceApprove(value.id)} disabled={approveRequestLoading} loading={approveRequestLoading}>Approve</Button>\n        } else {\n          return <a>View</a>\n        }\n        \n      },\n    },\n    // Add more columns as needed\n  ];\n\n  const { data: serviceResponse, isLoading, isError, error, refetch } = useFetchServiceListQuery({\n    // service_name: \"MOBILE_BANKING\",\n    request_type: \"LOCKER_REQUEST\",\n  });\n  const [approveRequest, {isLoading: approveRequestLoading }] = useApproveRequestMutation();\n\n  // Extract the results array or set it to an empty array if data is undefined\n  const tableData: ServiceRequest[] = serviceResponse?.data?.data || [];\n\n  // Handle loading state\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  // Handle error state\n  if (isError) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error?.toString() || \"An error occurred while fetching data.\"}\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n  const handleServiceApprove = (id:number) => {\n\n    approveRequest({id}).unwrap()\n    .then((res) => {\n      displaySuccess(res.message)\n      refetch();\n    }).catch((err) => {\n      displayError(err.message)\n    });\n  }\n  return (\n    <div>\n      {/* <Typography.Title level={4}>New Mobank Registration</Typography.Title> */}\n      <Table\n        columns={columns}\n        dataSource={tableData}\n        rowKey=\"id\" // Ensure each row has a unique key\n        bordered\n        pagination={{\n          pageSize: 10, // Adjust page size as needed\n          total: serviceResponse?.data.total, // Total number of records\n          showSizeChanger: false, // Hide page size changer if not needed\n        }}\n        // Optional: Add more table props like onChange for sorting/filtering\n      />\n    </div>\n  );\n};\n\nexport default LockerRequest;","import React from 'react';\nimport { Tabs } from 'antd';\nimport type { TabsProps } from 'antd';\n\nimport FixedDeposit from './FixedDeposit';\nimport DisputeClaim from './DisputeClaim';\nimport BlockAccount from './BlockAccount';\nimport ChequeRequest from './ChequeRequest';\nimport ChequeStopRequest from './ChequeStopRequest';\nimport BalanceCertificate from './BalanceCertificate';\nimport LockerRequest from './LockerRequest';\n\nconst onChange = (key: string) => {\n  console.log(key);\n};\n\nconst items: TabsProps['items'] = [\n  {\n    key: '1',\n    label: 'Fixed Deposit',\n    children: <FixedDeposit />,\n  },\n  {\n    key: '2',\n    label: 'Dispute Claim',\n    children: <DisputeClaim />,\n  },\n  {\n    key: '3',\n    label: 'Block Account',\n    children: <BlockAccount />,\n  },\n  {\n    key: '4',\n    label: 'Cheque Request',\n    children: <ChequeRequest />,\n  },\n  {\n    key: '5',\n    label: 'Cheque Stop Request',\n    children: <ChequeStopRequest />,\n  },\n  {\n    key: '6',\n    label: 'Balance Certificate',\n    children: <BalanceCertificate />,\n  },\n  {\n    key: '7',\n    label: 'Locker Request',\n    children: <LockerRequest />,\n  },\n];\n\nconst CustomerServiceRequest: React.FC = () => <Tabs defaultActiveKey=\"1\" items={items} onChange={onChange} />;\n\nexport default CustomerServiceRequest;","import { Navigate, Route, Routes } from 'react-router-dom';\nimport FixedDeposit from './FixedDeposit';\nimport DisputeClaim from './DisputeClaim';\nimport BlockAccount from './BlockAccount';\nimport ChequeRequest from './ChequeRequest';\nimport ChequeStopRequest from './ChequeStopRequest';\nimport BalanceCertificate from './BalanceCertificate';\nimport LockerRequest from './LockerRequest';\nimport CustomerServiceRequest from './CustomerServiceRequest';\n\n\nexport const CustomerServiceRoutes = () => {\n    return (\n      <Routes>\n         <Route path=\"\" element={<CustomerServiceRequest />} />\n        <Route path=\"fixed-deposit\" element={<FixedDeposit />} />\n        <Route path=\"dispute-claim\" element={<DisputeClaim />} />\n        <Route path=\"account-freeze\" element={<BlockAccount />} />\n        <Route path=\"cheque-request\" element={<ChequeRequest />} />\n        <Route path=\"cheque-stop\" element={<ChequeStopRequest />} />\n        <Route path=\"balance-certificate-request\" element={<BalanceCertificate />} />\n        <Route path=\"locker-request\" element={<LockerRequest />} />\n        <Route path=\"*\" element={<Navigate to=\".\" />} />\n      </Routes>\n    );\n  };"],"names":["FixedDeposit","columns","date","value","jsx","Button","handleServiceApprove","approveRequestLoading","serviceResponse","isLoading","isError","error","refetch","useFetchServiceListQuery","approveRequest","useApproveRequestMutation","tableData","Spin","Alert","id","res","displaySuccess","err","displayError","Table","DisputeClaim","BlockAccount","ChequeRequest","ChequeStopRequest","BalanceCertificate","LockerRequest","onChange","key","items","CustomerServiceRequest","Tabs","CustomerServiceRoutes","Routes","Route","Navigate"],"mappings":"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"}